---
#name: Build

on:
  push:
  #  branches: [ master ]

  workflow_dispatch:
    inputs:
      clear-docker-cache:
        description: 'clear docker cache with rm -fr /tmp/.buildx-cache /tmp/.buildx-cache-old /tmp/.buildx-cache-new'     
        required: false 
        type: boolean
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-secrets
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions:
  packages: read
  contents: read

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        #uses: fkirc/skip-duplicate-actions@master
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/docs/**", ".github/workflows/loop-test-build.yml"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  x86:
    name: x86
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          repository: ipxe/ipxe
          path: .
          fetch-depth: 0
      - name: Install packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
                           mtools syslinux isolinux \
                           libc6-dev-i386 libc6-dbg:i386 valgrind
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.8
        with:
          key: ${{ matrix.os }}-${{ matrix.type }}
          verbose: 2 # "Verbosity level: 0 (default), 1 or 2. Ignore for sccache."
          # max-size: 500M # Max size of the cache, default: 500M
          # variant: ccache # 'Ccache variant to use. Either "ccache" (the default) or "sccache" (see https://github.com/mozilla/sccache)'
          # save: false # If 'false', do not save the cache, only restore. default: true
      - name: Build (BIOS)
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          make -j 4 -C src
      - name: Build (Everything)
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          make -j 4 -C src everything
      - name: Test
        run: |
          valgrind ./src/bin-i386-linux/tests.linux
          valgrind ./src/bin-x86_64-linux/tests.linux
  arm32:
    name: ARM32
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          repository: ipxe/ipxe
          path: .
          fetch-depth: 0
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
                           mtools syslinux isolinux gcc-arm-none-eabi
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.8
        with:
          key: ${{ matrix.os }}-${{ matrix.type }}
          verbose: 2 # "Verbosity level: 0 (default), 1 or 2. Ignore for sccache."
          # max-size: 500M # Max size of the cache, default: 500M
          # variant: ccache # 'Ccache variant to use. Either "ccache" (the default) or "sccache" (see https://github.com/mozilla/sccache)'
          # save: false # If 'false', do not save the cache, only restore. default: true
      - name: Build
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          make -j 4 -C src CROSS=arm-none-eabi- \
               bin-arm32-efi/intel.efi \
               bin-arm32-efi/intel.usb \
               bin-arm32-efi/intel.iso
  arm64:
    name: ARM64
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          repository: ipxe/ipxe
          path: .
          fetch-depth: 0
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -o Acquire::Retries=50 \
                           mtools syslinux isolinux gcc-aarch64-linux-gnu
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.8
        with:
          key: ${{ matrix.os }}-${{ matrix.type }}
          verbose: 2 # "Verbosity level: 0 (default), 1 or 2. Ignore for sccache."
          # max-size: 500M # Max size of the cache, default: 500M
          # variant: ccache # 'Ccache variant to use. Either "ccache" (the default) or "sccache" (see https://github.com/mozilla/sccache)'
          # save: false # If 'false', do not save the cache, only restore. default: true
      - name: Build
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          make -j 4 -C src CROSS=aarch64-linux-gnu- \
               bin-arm64-efi/ipxe.efi \
               bin-arm64-efi/ipxe.usb \
               bin-arm64-efi/ipxe.iso
